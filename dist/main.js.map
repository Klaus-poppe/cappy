{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/ai/ai.component.html","webpack:///./src/app/components/ai/ai.component.scss","webpack:///./src/app/components/ai/ai.component.ts","webpack:///./src/app/model/message.ts","webpack:///./src/app/services/ai.service.ts","webpack:///./src/app/services/auth-interceptor.service.ts","webpack:///./src/app/services/index.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n<app-ai></app-ai>\"","module.exports = \"\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { MatButtonModule, MatInputModule, MatCardModule, MatIconModule } from '@angular/material';\n\nimport { AppComponent } from './app.component';\n\nimport { AiService, AuthInterceptorService } from './services';\nimport { AiComponent } from './components/ai/ai.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AiComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    MatButtonModule, MatInputModule, MatCardModule, MatIconModule\n  ],\n  providers: [\n    AiService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthInterceptorService,\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<mat-card>\\n  <h1 class=\\\"mat-display-1\\\">Student Information Based System</h1>\\n\\n  <mat-card-content *ngFor=\\\"let message of allMessages | async\\\">\\n    <div class=\\\"message\\\" [ngClass]=\\\"{ 'from': message.sentBy === 'bot', 'to':   message.sentBy === 'user' }\\\">\\n      {{ message.content }}\\n    </div>\\n  </mat-card-content>\\n\\n  <div class=\\\"message-container\\\">\\n    <mat-card-actions class=\\\"voice-button\\\">\\n      <button mat-icon-button (click)=\\\"startTalkingToBot()\\\">\\n        <mat-icon>keyboard_voice</mat-icon>\\n      </button>\\n    </mat-card-actions>\\n    <mat-form-field>\\n      <input matInput [(ngModel)]=\\\"formInput\\\" min=\\\"2\\\" placeholder=\\\"Your Message...\\\" (keyup.enter)=\\\"sendMessageToBot()\\\" type=\\\"text\\\">\\n    </mat-form-field>\\n  </div>\\n\\n  <mat-card-actions class=\\\"button center\\\">\\n    <button mat-raised-button (click)=\\\"sendMessageToBot()\\\">Send</button>\\n  </mat-card-actions>\\n\\n</mat-card>\\n\"","module.exports = \".message {\\n  border-radius: 2px;\\n  line-height: 36px;\\n  margin: 0 15px 10px;\\n  padding: 15px 20px;\\n  vertical-align: baseline;\\n  position: relative;\\n  font-weight: bold;\\n  word-wrap: break-word; }\\n\\n.message-container {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center; }\\n\\n.message.to {\\n  background-color: #303F9F;\\n  color: #FFFFFF;\\n  margin: -10px 0 -10px 100px; }\\n\\n.message.from {\\n  background-color: #FF4081;\\n  color: #FFFFFF;\\n  margin: -10px 100px -10px 0; }\\n\\n.center {\\n  display: flex;\\n  justify-content: center; }\\n\\n.mat-form-field {\\n  display: inline; }\\n\\n.mat-form-field {\\n  width: 100%; }\\n\\n.mat-raised-button {\\n  background-color: #303F9F;\\n  color: #FFFFFF; }\\n\\n.voice-button {\\n  border-radius: 50%;\\n  width: 40px;\\n  height: 40px;\\n  line-height: 24px;\\n  padding: 8px 20px 8px 8px; }\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { scan } from 'rxjs/operators';\n\nimport { AiService } from '../../services/ai.service';\nimport { Message } from '../../model/message';\n\n@Component({\n  selector: 'app-ai',\n  templateUrl: './ai.component.html',\n  styleUrls: ['./ai.component.scss']\n})\nexport class AiComponent implements OnInit, OnDestroy {\n  allMessages: Observable<Message[]>;\n  formInput: string;\n\n  constructor(public ai: AiService) {\n    this.formInput = '';\n  }\n\n  ngOnInit() {\n    this.allMessages = this.ai.conversation.asObservable()\n      .pipe(\n        scan((acc, val) => acc.concat(val))\n      )\n  }\n\n  ngOnDestroy() {\n    this.ai.destroyVoiceConversation();\n  }\n\n  sendMessageToBot() {\n    this.ai.textConversation(this.formInput);\n    this.formInput = '';\n  }\n\n  startTalkingToBot() {\n    this.ai.voiceConversation()\n      .subscribe(\n        (value) => {\n          this.formInput = value;\n          // console.log(value);\n        },\n        (err) => {\n          console.log(err);\n          if (err.error === 'no-speech') {\n            // console.log(\"Talking error\");\n            this.startTalkingToBot();\n          }\n        },\n        () => {\n          // console.log(\"Talking complete\");\n          this.startTalkingToBot();\n        });\n  }\n}\n","export class Message {\n  constructor(\n    public content: string,\n    public sentBy: string\n  ) { }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport * as lodash from 'lodash';\n\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { ApiAiClient } from 'api-ai-javascript';\nimport { Message } from '../model/message'\nimport { IWindow } from '../interface/Iwindow'\n\n@Injectable()\nexport class AiService {\n  readonly token = environment.dialogflow.angularAIBot;\n  readonly client = new ApiAiClient({ accessToken: this.token });\n\n  speechRecognition: any;\n  conversation = new BehaviorSubject<Message[]>([]);\n\n  constructor(private zone: NgZone) {\n  }\n\n  update(msg: Message) {\n    this.conversation.next([msg]);\n  }\n\n  textConversation(msg: string) {\n    const userMessage = new Message(msg, 'user');\n    this.update(userMessage);\n    return this.client.textRequest(msg)\n      .then(res => {\n        const speech = res.result.fulfillment.speech;\n        const botMessage = new Message(speech, 'bot');\n        this.update(botMessage);\n      });\n  }\n\n  voiceConversation(): Observable<string> {\n    return Observable.create(observer => {\n      const { webkitSpeechRecognition }: IWindow = <IWindow>window;\n      this.speechRecognition = new webkitSpeechRecognition();\n      this.speechRecognition.continuous = false;\n      this.speechRecognition.interimResults = false;\n      this.speechRecognition.lang = 'en-us';\n      this.speechRecognition.maxAlternatives = 0;\n\n      this.speechRecognition.onresult = speech => {\n        let sentence = '';\n        if (speech.results) {\n          const result = speech.results[speech.resultIndex];\n          const transcript = result[0].transcript;\n          if (result.isFinal) {\n            result[0].confidence < 0.1 ? console.log('Unrecognized result') : sentence = lodash.trim(transcript);\n          }\n        }\n        this.zone.run(() => {\n          observer.next(sentence);\n        });\n      };\n\n      this.speechRecognition.onerror = error => {\n        observer.error(error);\n      };\n\n      this.speechRecognition.onend = () => {\n        observer.complete();\n      };\n\n      this.speechRecognition.start();\n      // console.log('Listening...');\n    });\n  }\n\n  destroyVoiceConversation() {\n    this.speechRecognition ? this.speechRecognition.stop() : this.speechRecognition.stop();\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { AiService } from './ai.service';\n\n@Injectable()\nexport class AuthInterceptorService implements HttpInterceptor {\n\n    constructor(private injector: Injector) { }\n\n    intercept(req, next) {\n        const aiService = this.injector.get(AiService);\n        const authRequest = req.clone({\n            headers: req.headers.set('Authorization', 'Bearer ' + aiService.token)\n        });\n\n        return next.handle(authRequest);\n    }\n}\n","export * from './auth-interceptor.service';\nexport * from './ai.service';","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `angular-cli.json`.\n\nexport const environment = {\n  production: false,\n\n  dialogflow: {\n    angularAIBot: 'fcb0a6064e7847ec855cea1d091ea64e' // read-only access\n  }\n};\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { environment } from './environments/environment';\nimport { AppModule } from './app/app.module';\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule, {\n  preserveWhitespaces: false\n});\n"],"sourceRoot":""}